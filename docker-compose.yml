version: '3.8'

services:
  consul:
    image: 'consul:1.10.4'
    container_name: 'consul'
    ports:
      - '8500:8500'
    networks:
      - app-network

  rabbitmq:
    image: 'rabbitmq:3.9.13-management'
    container_name: 'rabbitmq'
    ports:
      - '5672:5672'
      - '15672:15672'
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    networks:
      - app-network

  mysql:
    container_name: mysql
    image: mysql:8.4.2
    restart: always
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: secret
    volumes:
      - mysql-data:/var/lib/mysql
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-psecret"]
      interval: 10s
      retries: 10
      start_period: 40s
      timeout: 5s
    command: >
      bash -c "docker-entrypoint.sh mysqld & sleep 5 && mysql -u root -p$${MYSQL_ROOT_PASSWORD} -e 'CREATE DATABASE IF NOT EXISTS order_db; CREATE DATABASE IF NOT EXISTS product_db;' && wait"

  order_service:
    container_name: order_service
    hostname: order-service
    build: order-service/.
    command: mvn clean spring-boot:run -Dspring-boot.run.profiles=docker
    ports:
      - "8080:8080"
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/order_db
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: secret
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_RABBITMQ_ADDRESSES: rabbitmq:5672
      SPRING_RABBITMQ_USERNAME: guest
      SPRING_RABBITMQ_PASSWORD: guest
      ORDER_TOPIC: order-topic
      ORDER_GROUP: order-group
      PRODUCT_TOPIC: product-topic
      PRODUCT_GROUP: product-group
    volumes:
      - ../:/order_service
    networks:
      - app-network
    depends_on:
      mysql:
        condition: service_healthy
      rabbitmq:
        condition: service_started

  product_service:
    container_name: product_service
    hostname: product-service
    build: product-service/.
    command: mvn clean spring-boot:run -Dspring-boot.run.profiles=docker
    ports:
      - "8081:8081"
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/product_db
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: secret
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
    volumes:
      - ../:/product_service
    networks:
      - app-network
    depends_on:
      mysql:
        condition: service_healthy
      rabbitmq:
        condition: service_started

volumes:
  mysql-data:

networks:
  app-network:
    driver: bridge